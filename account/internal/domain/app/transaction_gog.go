// Code generated by gog; DO NOT EDIT.
// Version: 0.3.0
package app

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/quintans/es-cqrs-bank-transfer/account/internal/domain"
	"github.com/quintans/es-cqrs-bank-transfer/shared/event"
	"github.com/quintans/es-cqrs-bank-transfer/shared/utils"
	"github.com/quintans/eventsourcing/log"
	"github.com/quintans/eventsourcing/projection"
)

// Generated by gog:aspect

type TransactionServiceAspect struct {
	Logger log.Logger
	Next   TransactionService
}

func (a *TransactionServiceAspect) Create(ctx context.Context, cmd domain.CreateTransactionCommand) (uuid.UUID, error) {
	// monitor aspect
	fn0 := func(ctx context.Context, cmd domain.CreateTransactionCommand) (uuid.UUID, error) {
		r0, err := a.Next.Create(ctx, cmd)
		if err != nil {
			a.Logger.WithError(err).
				WithTags(log.Tags{
					"method": "TransactionService.Create",
					"arguments": utils.LazyStr(func() string {
						b, err := json.MarshalIndent(map[string]any{
							"cmd": cmd,
						}, "", "    ")
						if err != nil {
							return err.Error()
						}
						return string(b)
					}),
				}).
				Error("calling method")
		}
		return r0, err
	}

	return fn0(ctx, cmd)
}

func (a *TransactionServiceAspect) TransactionCreated(ctx context.Context, resumeKey projection.ResumeKey, resumeToken projection.Token, e event.TransactionCreated) error {
	// monitor aspect
	fn0 := func(ctx context.Context, resumeKey projection.ResumeKey, resumeToken projection.Token, e event.TransactionCreated) error {
		err := a.Next.TransactionCreated(ctx, resumeKey, resumeToken, e)
		if err != nil {
			a.Logger.WithError(err).
				WithTags(log.Tags{
					"method": "TransactionService.TransactionCreated",
					"arguments": utils.LazyStr(func() string {
						b, err := json.MarshalIndent(map[string]any{
							"resumeKey":   resumeKey,
							"resumeToken": resumeToken,
							"e":           e,
						}, "", "    ")
						if err != nil {
							return err.Error()
						}
						return string(b)
					}),
				}).
				Error("calling method")
		}
		return err
	}

	return fn0(ctx, resumeKey, resumeToken, e)
}

func (a *TransactionServiceAspect) TransactionFailed(ctx context.Context, resumeKey projection.ResumeKey, resumeToken projection.Token, aggregateID uuid.UUID, e event.TransactionFailed) error {
	// monitor aspect
	fn0 := func(ctx context.Context, resumeKey projection.ResumeKey, resumeToken projection.Token, aggregateID uuid.UUID, e event.TransactionFailed) error {
		err := a.Next.TransactionFailed(ctx, resumeKey, resumeToken, aggregateID, e)
		if err != nil {
			a.Logger.WithError(err).
				WithTags(log.Tags{
					"method": "TransactionService.TransactionFailed",
					"arguments": utils.LazyStr(func() string {
						b, err := json.MarshalIndent(map[string]any{
							"resumeKey":   resumeKey,
							"resumeToken": resumeToken,
							"aggregateID": aggregateID,
							"e":           e,
						}, "", "    ")
						if err != nil {
							return err.Error()
						}
						return string(b)
					}),
				}).
				Error("calling method")
		}
		return err
	}

	return fn0(ctx, resumeKey, resumeToken, aggregateID, e)
}
