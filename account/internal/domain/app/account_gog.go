// Code generated by gog; DO NOT EDIT.
// Version: 0.3.0
package app

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/quintans/es-cqrs-bank-transfer/account/internal/domain"
	"github.com/quintans/es-cqrs-bank-transfer/shared/utils"
	"github.com/quintans/eventsourcing/log"
)

// Generated by gog:aspect

type AccountServiceAspect struct {
	Logger log.Logger
	Next   AccountService
}

func (a *AccountServiceAspect) Create(ctx context.Context, createAccount domain.CreateAccountCommand) (uuid.UUID, error) {
	// monitor aspect
	fn0 := func(ctx context.Context, createAccount domain.CreateAccountCommand) (uuid.UUID, error) {
		r0, err := a.Next.Create(ctx, createAccount)
		if err != nil {
			a.Logger.WithError(err).
				WithTags(log.Tags{
					"method": "AccountService.Create",
					"arguments": utils.LazyStr(func() string {
						b, err := json.MarshalIndent(map[string]any{
							"createAccount": createAccount,
						}, "", "    ")
						if err != nil {
							return err.Error()
						}
						return string(b)
					}),
				}).
				Error("calling method")
		}
		return r0, err
	}

	return fn0(ctx, createAccount)
}

func (a *AccountServiceAspect) Balance(ctx context.Context, id uuid.UUID) (domain.AccountDTO, error) {
	// monitor aspect
	fn0 := func(ctx context.Context, id uuid.UUID) (domain.AccountDTO, error) {
		r0, err := a.Next.Balance(ctx, id)
		if err != nil {
			a.Logger.WithError(err).
				WithTags(log.Tags{
					"method": "AccountService.Balance",
					"arguments": utils.LazyStr(func() string {
						b, err := json.MarshalIndent(map[string]any{
							"id": id,
						}, "", "    ")
						if err != nil {
							return err.Error()
						}
						return string(b)
					}),
				}).
				Error("calling method")
		}
		return r0, err
	}

	return fn0(ctx, id)
}
