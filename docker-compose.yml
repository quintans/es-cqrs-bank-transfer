version: '3.4'

networks:
  my-network:
    driver: bridge

services:
  svc-account:
    build: 
      context: ./account
      # dockerfile: ./Dockerfile
    depends_on:
      - database
    environment:
      - ES_HOST=database
      - ES_NAME=accounts
      - API_PORT=8000
    networks:
      - my-network
    ports:
      - 8000:8000

  svc-forwarder:
    build: 
      context: ./forwarder
      # dockerfile: ./Dockerfile
    depends_on:
      - database
      - nats
      - consul
    environment:
      - ES_HOST=database
      - ES_NAME=accounts
      - NATS_ADDRESS=nats:4222
      - TOPIC=accounts
      - CONSUL_ADDRESS=localhost:8300
      - PARTITION_SLOTS=1,2 # expect max 2 instances, one partition each
    networks:
      - my-network
    ports:
      - 3000:3000

  svc-balance:
    build: 
      context: ./balance
      # dockerfile: ./Dockerfile
    depends_on:
      - nats
      - elastic
      - consul
      - svc-forwarder
    environment:
      - NATS_ADDRESS=nats:4222
      - TOPIC=accounts
      - CONSUL_ADDRESS=consul:8500
      - ES_ADDRESS=svc-forwarder:3000
      - ELASTIC_ADDRESSES=http://localhost:9200
      - PARTITIONS=2
      - BALANCE_PARTITIONS=1,2 # expect max 2 instances, one partition each
    networks:
      - my-network
    ports:
      - 8030:8030

  database:
    image: postgres:12.3-alpine
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "root" ]
      timeout: 45s
      interval: 10s
      retries: 10
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=accounts
    volumes:
      - ./scripts/db:/docker-entrypoint-initdb.d/
    networks:
      - my-network
    ports:
      - 5432:5432

  nats:
    image: nats-streaming
    ports:
      - "4222:4222"
      - "8222:8222"

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.8.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - my-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.8.0
    depends_on:
      - elastic
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elastic:9200
      ELASTICSEARCH_HOSTS: http://elastic:9200
    networks:
      - my-network

  # redis:
  #   image: "redis:alpine"
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - my-network
  consul:
    image: bitnami/consul:latest
    ports:
      - '8300:8300'
      - '8301:8301'
      - '8301:8301/udp'
      - '8500:8500'
      - '8600:8600'
      - '8600:8600/udp'
    networks:
      - my-network

  # https://medium.com/@renato.groffe/mongodb-mongo-express-docker-compose-montando-rapidamente-um-ambiente-para-uso-824f25ca6957
  mongo:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      # MONGO_REPLICA_SET_NAME: rs0
    ports:
      - 27017:27017
    volumes:
      - mongodb_data:/data/db
    networks:
      - my-network
    # command: ["--replSet", "rs0", "--bind_ip_all"]
    # healthcheck:
    #   test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongo -u root -p password --quiet) -eq 1
    #   interval: 10s
    #   start_period: 30s

  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: root
      ME_CONFIG_BASICAUTH_PASSWORD: password
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
    depends_on:
      - mongo
    links:
      - mongo
    networks:
      - my-network

volumes:
  mongodb_data:
  data01:
    driver: local
