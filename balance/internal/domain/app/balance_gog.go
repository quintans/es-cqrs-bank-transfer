// Code generated by gog; DO NOT EDIT.
// Version: 0.3.0
package app

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/quintans/es-cqrs-bank-transfer/balance/internal/domain"
	"github.com/quintans/es-cqrs-bank-transfer/balance/internal/domain/entity"
	"github.com/quintans/es-cqrs-bank-transfer/shared/event"
	"github.com/quintans/es-cqrs-bank-transfer/shared/utils"
	"github.com/quintans/eventsourcing/log"
)

// Generated by gog:aspect

type BalanceServiceAspect struct {
	Logger log.Logger
	Next   BalanceService
}

func (a *BalanceServiceAspect) GetOne(ctx context.Context, id uuid.UUID) (entity.Balance, error) {
	// monitor aspect
	fn0 := func(ctx context.Context, id uuid.UUID) (entity.Balance, error) {
		r0, err := a.Next.GetOne(ctx, id)
		if err != nil {
			a.Logger.WithError(err).
				WithTags(log.Tags{
					"method": "BalanceService.GetOne",
					"arguments": utils.LazyStr(func() string {
						b, err := json.MarshalIndent(map[string]any{
							"id": id,
						}, "", "    ")
						if err != nil {
							return err.Error()
						}
						return string(b)
					}),
				}).
				Error("calling method")
		}
		return r0, err
	}

	return fn0(ctx, id)
}

func (a *BalanceServiceAspect) ListAll(ctx context.Context) ([]entity.Balance, error) {
	// monitor aspect
	fn0 := func(ctx context.Context) ([]entity.Balance, error) {
		r0, err := a.Next.ListAll(ctx)
		if err != nil {
			a.Logger.WithError(err).
				WithTags(log.Tags{
					"method": "BalanceService.ListAll",
					"arguments": utils.LazyStr(func() string {
						b, err := json.MarshalIndent(map[string]any{}, "", "    ")
						if err != nil {
							return err.Error()
						}
						return string(b)
					}),
				}).
				Error("calling method")
		}
		return r0, err
	}

	return fn0(ctx)
}

func (a *BalanceServiceAspect) AccountCreated(ctx context.Context, m domain.Metadata, ac event.AccountCreated) error {
	// monitor aspect
	fn0 := func(ctx context.Context, m domain.Metadata, ac event.AccountCreated) error {
		err := a.Next.AccountCreated(ctx, m, ac)
		if err != nil {
			a.Logger.WithError(err).
				WithTags(log.Tags{
					"method": "BalanceService.AccountCreated",
					"arguments": utils.LazyStr(func() string {
						b, err := json.MarshalIndent(map[string]any{
							"m":  m,
							"ac": ac,
						}, "", "    ")
						if err != nil {
							return err.Error()
						}
						return string(b)
					}),
				}).
				Error("calling method")
		}
		return err
	}

	return fn0(ctx, m, ac)
}

func (a *BalanceServiceAspect) MoneyDeposited(ctx context.Context, m domain.Metadata, ac event.MoneyDeposited) error {
	// monitor aspect
	fn0 := func(ctx context.Context, m domain.Metadata, ac event.MoneyDeposited) error {
		err := a.Next.MoneyDeposited(ctx, m, ac)
		if err != nil {
			a.Logger.WithError(err).
				WithTags(log.Tags{
					"method": "BalanceService.MoneyDeposited",
					"arguments": utils.LazyStr(func() string {
						b, err := json.MarshalIndent(map[string]any{
							"m":  m,
							"ac": ac,
						}, "", "    ")
						if err != nil {
							return err.Error()
						}
						return string(b)
					}),
				}).
				Error("calling method")
		}
		return err
	}

	return fn0(ctx, m, ac)
}

func (a *BalanceServiceAspect) MoneyWithdrawn(ctx context.Context, m domain.Metadata, ac event.MoneyWithdrawn) error {
	// monitor aspect
	fn0 := func(ctx context.Context, m domain.Metadata, ac event.MoneyWithdrawn) error {
		err := a.Next.MoneyWithdrawn(ctx, m, ac)
		if err != nil {
			a.Logger.WithError(err).
				WithTags(log.Tags{
					"method": "BalanceService.MoneyWithdrawn",
					"arguments": utils.LazyStr(func() string {
						b, err := json.MarshalIndent(map[string]any{
							"m":  m,
							"ac": ac,
						}, "", "    ")
						if err != nil {
							return err.Error()
						}
						return string(b)
					}),
				}).
				Error("calling method")
		}
		return err
	}

	return fn0(ctx, m, ac)
}
